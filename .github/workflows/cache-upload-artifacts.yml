


# [skip ci], [ci skip], [no ci], [skip acitons], [actions skip]
# will skip workflow runs - add this messages to commit

name: Delpoy file
on:
    push:
        branches:
            - develop
            # - main
env:
    PROJECT_NAME: GitHubAtionsProject

jobs:
    JOB_1:
        continue-on-error: true
        strategy:
            matrix:
                operating-system: [macos-latest]
#                include: # additional combinations
#                    - node-version: 18
#                      operating-system: ubuntu-latest
#                exclude:
#                    - node-version: 12
#                      operating-system: ubuntu-latest


    # env here will only be availabel only in JOB_1 job
        env:
            PROJECT_NAME_SHORT: Github-Actions-Project

        runs-on: ${{ matrix.operating-system }}

        outputs:
            script-file-xxx: ${{ steps.publish_xxx.outputs.script-file-xxx }}

        steps:
            - name: Init step
              continue-on-error: true
              id: run-testsss # name is up to you
              run: Pod install

            - name: Test continue on error
              run: |
                echo "Test continue on error"
                echo "STEP run-testsss outcome: ${{ steps.run-testsss.outcome }}"

            - name: Test if condition is FAILURE
            # failure() - always return true when any previous step or job failed
            # success() - always return true when non of any previous step or job failed
            # always() / cancelled()
            # if-conditiion is also available on job lever, not only step level
              if: failure() && steps.run-testsss.outcome == 'failure' # uncomment below line of code and comment it
             # continue-on-error: true

              run: |
                echo "${{ steps.run-testsss.outcome }}"
                echo "Test if condition step is launched and passed"


            - name: Get code
              uses: actions/checkout@v3

              # caching pod install for example
              # must set before install podfile dependecies
              # see extra infor in github.com/actions/cache
            - name: Cache dependencies
              uses: actions/cache@v3
              with:
                # specify the files / folder that shoud be cached
                # saved data after current job is done if it does not exist before in this folder
                # but if new dependencies were installed in podfile - then stored new cache
                path: github-actions/Pods
                # key - retrieveing by this key cache for the future
                # may contain dynamic element
                # hashFile() - github function produces an unique value based on file path
                # ** - no matter in which subfolder it might be
                key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
                restore-keys: |
                    ${{ runner.os }}-pods-

            - name: Install pod dependencies
              run: |
                    cd github-actions
                    pod install

            - name: Publish Variables
              run: |
                echo "Project name: ${{ env.PROJECT_NAME }}"
                echo "Short project name: ${{ env.PROJECT_NAME_SHORT }}"

                echo "User name: ${{ secrets.PROJECT_USERNAME }}"
                echo "User password: ${{ secrets.PROJECT_PASSWORD }}"

            - name: Publish Pod filename
              id: publish_xxx
              run: find github-actions/github-actions/*.json -type f -execdir echo 'script-file-xxx={}' >> $GITHUB_OUTPUT ';'

            - name: Uplaod artifacts
              uses: actions/upload-artifact@v3
              with:
                name: artifa-files
                path: |
                    github-actions/github-actions/test.json
                    github-actions/github-actions/Resources
    JOB_1_1:
        needs: JOB_1
        uses: ./.github/workflows/reusable.yml
        with:
            artifact-name: artifa-files
        # secrets: # optional
        #    some-secret: ${{ secrets.some-secret }}

    JOB_1_2:
        needs: JOB_1_1
        runs-on: macos-latest
        steps:
            - name: Print deploy output
              run: echo "${{ needs.JOB_1_1.outputs.result }}"


    JOB_2:
        needs: JOB_1
        runs-on: macos-latest
        steps:
            - name: Get code
              uses: actions/checkout@v3

            - name: Load & cache dependencies # with custom action
              id: cache-deps
              uses: ./.github/actions/cached-deps
              with:
                caching: 'false'

            - name: Output info
              run: echo "Cached used? ${{ steps.cache-deps.outputs.used-cached }}"


# Uncommit in order to swap out custom action with these lines of code
            # - name: Cache dependencies
            #   uses: actions/cache@v3
            #   with:
            #     path: github-actions/Pods
            #     key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
            #     restore-keys: |
            #         ${{ runner.os }}-pods-

            # - name: List of files from directory
            #   run: |
            #     cd github-actions
            #     ls -latest

            # - name: Install pod dependencies
            #   run: |
            #     cd github-actions
            #     pod install

            - name: Get build artifacts
              uses: actions/download-artifact@v3
              with:
                name: artifa-files

            - name: Output contents from artifa
              run: ls #show all the files from artifa-files.zip

            - name: Output filename
            # needs - docs.github.com/en/actions/learn-github-actions/contexts
              run: echo "${{ needs.JOB_1.outputs.script-file-xxx }}"

            - name: Deploy
              run: echo "Deploying..."

    JOB_3:
        needs: [JOB_1, JOB_2]
        if: failure() # if any of "needs" array jobs has failed
        runs-on: macos-latest
        steps:
            - name: Output information
              run: |
                echo "Something went wrong..."
                echo "${{ toJSON(github) }}"


