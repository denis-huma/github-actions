name: Environment Variables
on: release
env:
    WF_ENV: Available to all jobs # global visibility

permissions:
  contents: write

jobs:
    decrypt_file:
    # https://docs.github.com/en/actions/security-guides/encrypted-secrets#
        runs-on: macos-latest
        steps:
          - uses: actions/checkout@v1
          - name: Decrypt file
          # secret.json.gpg - input, created encrypted file in main directory
            run: gpg --quiet --batch --yes --decrypt --passphrase="$PASSPHRASE" --output $HOME/secret.json secret.json.gpg
            env:
            # secrets.PASSPHRASE - our property which was made by us using github web page
              PASSPHRASE: ${{secrets.PASSPHRASE}}
          - name: Show Secret Data
            # cat - bash command that receives a file path and it will just output what inside in the file
            run: cat $HOME/secret.json

    create_issue:
        runs-on: macos-latest
        steps:
          - name: Push a random file

            run: |
                # where are we are
                pwd

                # list of all the files in working directory
                ls -a

                # init a working directory
                git init

                # only for local machime where we have ssh keys
                # git remote add origin "git@github.com:denis-huma/github-actions-test.git"

                git remote add origin "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.git"

                # set username and email, it could you your real github user
                git config --global user.email "denis.yaremenko@huma.com"
                git config --global user.name "Denis"

                git fetch
                git checkout main
                git branch --set-upstream-to=origin/main
                git pull
                ls -a
                echo RANDOM >> random.txt
                ls -a
                git add -A
                git commit -m "Random file"
                git push

            # - name: Create issue using REST API
            #   run: |
            #       curl --request POST \
            #       --url https://api.github.com/repos/${{ github.repository }}/issues \
            #       --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' \
            #       --header 'content-type: application/json' \
            #       --data '{
            #         "title": "Automated issue for commit: ${{ github.sha }}",
            #         "body": "This issue was automatically created by the GitHub Action workflow **${{ github.workflow }}**. \n\n The commit hash was: _${{ github.sha }}_."
            #         }' \
            #       --fail


    log-env:
        runs-on: macos-latest
        env:
            # JOB_ENV: Available to all steps in log-env job
            # secrets.WF_ENV - encrypted var, nobody can see it
             WF_ENV: ${{ secrets.WF_ENV }}
        steps:
            - name: Log Env Var
               # env:
               # STEP_ENV: Available to only this step
              run: |
                        echo "WF_ENV: ${WF_ENV}"
                        echo "JOB_ENV: ${JOB_ENV}"
                        # echo "STEP_ENV: ${STEP_ENV}"

            - name: Log Env Var Second
              run: |
                echo "WF_ENV: ${WF_ENV}"
                echo "JOB_ENV: ${JOB_ENV}"
                # echo "STEP_ENV: ${STEP_ENV}"

    log-default-env:
                runs-on: macos-latest
                steps:
                    - name: Default Env Var
                      run: |
                        echo "HOME: ${HOME}"
                        echo "GITHUB_WORKFLOW: ${GITHUB_WORKFLOW}"
                        echo "GITHUB_ACTION: ${GITHUB_ACTION}"
                        echo "GITHUB_ACTION: ${GITHUB_ACTIONS}"
                        echo "GITHUB_ACTOR: ${GITHUB_ACTOR}"
                        echo "GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}" # the same as github.repository
                        echo "GITHUB_EVENT_NAME: ${GITHUB_EVENT_NAME}"
                        echo "GITHUB_WORKSPACE: ${GITHUB_WORKSPACE}"
                        echo "GITHUB_SHA: ${GITHUB_SHA}"
                        echo "GITHUB_REF: ${GITHUB_REF}"
                        echo "WF_ENV: ${WF_ENV}"
                        echo "JOB_ENV: ${JOB_ENV}"
                        # echo "STEP_ENV: ${STEP_ENV}"


